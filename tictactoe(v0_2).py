# -*- coding: utf-8 -*-
"""tictactoe(v0.2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19-NXskE5xVk66KJfdlpfwFMxp5KMV8Y-
"""

# -*- coding: utf-8 -*-
"""
Created on Fri Dec 20 11:35:36 2024

@author: user
"""

# 井字遊戲v0.2 字體顏色

# 顯示遊戲板
def print_board(board):

    print(f"{board[0]} | {board[1]} | {board[2]}")
    print("--+---+--")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("--+---+--")
    print(f"{board[6]} | {board[7]} | {board[8]}")


# 檢查是否有玩家獲勝
def check_winner(board, player):
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # 橫向
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # 垂直
        [0, 4, 8], [2, 4, 6]  # 斜向
    ]
    for condition in win_conditions:
        if board[condition[0]] == board[condition[1]] == board[condition[2]] == player:
            return True
    return False

# 檢查遊戲是否結束
def is_board_full(board):
    #return all([spot != " " for spot in board])
    return all([spot == "\033[43mO\033[0m" or spot == "\033[46mX\033[0m" for spot in board]) #12/19 因為九宮格修改填入數字會影響原本以!= " "來判斷是否平手 所以修改判斷式
# 主遊戲邏輯
def play_game():
  #board = [" "] * 9  # 初始化井字板
  board =[]      #12/19 修改為顯示1~9

  for i in range(9):
      board.append("\033[42m"+str(i+1)+"\033[0m") #12/20 加入字體顏色
  current_player = "\033[46mX\033[0m"  # 先手玩家為 "X"

  while True:
     try:
      print_board(board)  # 顯示當前遊戲板
      move = int(input(f"玩家 {current_player} 請選擇位置（1-9）輸入99可強制結束：")) - 1

      if move == 98 :
        print("強制結束") #12/19 新增強制結束
        break
      elif move > 9 or move <=-1 : #12/19 新增判斷數字犯為
        print("位置超出範圍，請重新選擇。")
        continue

        # 確保選擇的格子有效且尚未被佔用
      elif board[move] == "\033[43mO\033[0m" or board[move] == "\033[46mX\033[0m":
        print("這個位置已經被佔用了，請重新選擇。")
        continue



      board[move] = current_player  # 玩家在指定位置放置標記



        # 檢查是否有玩家獲勝
      if check_winner(board, current_player):
        print_board(board)
        print(f"玩家 {current_player} 獲勝！")
        break

      # 檢查是否平局
      if is_board_full(board):
        print_board(board)
        print("遊戲結束，平局！")
        break

        # 換玩家
      current_player = "\033[43mO\033[0m" if current_player == "\033[46mX\033[0m" else "\033[46mX\033[0m"
     except ValueError:
        print("請輸入有效的數字。")

# 開始遊戲
if __name__ == "__main__":
    play_game()